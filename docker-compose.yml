services:
  postgres:
    image: timescale/timescaledb:2.14.2-pg14
    environment:
      POSTGRES_DB: trading
      POSTGRES_USER: trading
      POSTGRES_PASSWORD: trading
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U trading -d trading -h localhost
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test:
        - CMD-SHELL
        - redis-cli ping | grep -q PONG
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  auth_service:
    build:
      context: .
      dockerfile: services/auth_service/Dockerfile
    env_file:
      - .env.dev
    environment:
      PYTHONPATH: /app
      DATABASE_URL: postgresql+psycopg2://trading:trading@postgres:5432/trading
      BROKER_CREDENTIALS_ENCRYPTION_KEY: ${BROKER_CREDENTIALS_ENCRYPTION_KEY:-}
      STREAMING_INGEST_URL: ${STREAMING_INGEST_URL:-http://streaming:8000}
      STREAMING_SERVICE_TOKEN: ${STREAMING_SERVICE_TOKEN:-reports-token}
      STREAMING_ROOM_ID: ${STREAMING_ROOM_ID:-public-room}
      AUTH_SERVICE_ALLOWED_ORIGINS: ${AUTH_SERVICE_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8022}
      AUTH_SERVICE_ALLOWED_METHODS: ${AUTH_SERVICE_ALLOWED_METHODS:-GET,POST,PUT,PATCH,DELETE,OPTIONS}
      AUTH_SERVICE_ALLOWED_HEADERS: ${AUTH_SERVICE_ALLOWED_HEADERS:-Authorization,Content-Type}
      AUTH_SERVICE_ALLOW_CREDENTIALS: ${AUTH_SERVICE_ALLOW_CREDENTIALS:-true}
      ENABLE_DOCS: ${ENABLE_DOCS:-true}
      AUTH_SERVICE_SESSION_SECRET: ${AUTH_SERVICE_SESSION_SECRET:-dev-session-secret}
      AUTH_SERVICE_SESSION_COOKIE_NAME: ${AUTH_SERVICE_SESSION_COOKIE_NAME:-auth_session}
      AUTH_SERVICE_SESSION_COOKIE_SAMESITE: ${AUTH_SERVICE_SESSION_COOKIE_SAMESITE:-none}
      AUTH_SERVICE_SESSION_COOKIE_SECURE: ${AUTH_SERVICE_SESSION_COOKIE_SECURE:-false}
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8011:8000"

  user_service:
    build:
      context: .
      dockerfile: services/user_service/Dockerfile
    env_file:
      - .env.dev
    environment:
      PYTHONPATH: /app
      DATABASE_URL: postgresql+psycopg2://trading:trading@postgres:5432/trading
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8012:8000"

  billing_service:
    build:
      context: .
      dockerfile: infra/docker/fastapi-service.Dockerfile
      args:
        SERVICE_DIR: billing_service
        SERVICE_PACKAGE: billing_service
        SERVICE_MODULE: app.main
    env_file:
      - .env.dev
    environment:
      DATABASE_URL: postgresql+psycopg2://trading:trading@postgres:5432/trading
      REDIS_URL: redis://redis:6379/0
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./infra/migrations:/app/infra/migrations:ro
      - ./scripts:/app/scripts:ro
    ports:
      - "8005:8000"

  order_router:
    build:
      context: .
      dockerfile: infra/docker/fastapi-service.Dockerfile
      args:
        SERVICE_DIR: order_router
        SERVICE_PACKAGE: order_router
        SERVICE_MODULE: app.main
    env_file:
      - .env.dev
    environment:
      DATABASE_URL: postgresql+psycopg2://trading:trading@postgres:5432/trading
      STREAMING_INGEST_URL: ${STREAMING_INGEST_URL:-http://streaming:8000}
      STREAMING_SERVICE_TOKEN: ${STREAMING_SERVICE_TOKEN:-reports-token}
      STREAMING_ROOM_ID: ${STREAMING_ROOM_ID:-public-room}
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      streaming:
        condition: service_healthy
    volumes:
      - ./infra/migrations:/app/infra/migrations:ro
      - ./scripts:/app/scripts:ro
    ports:
      - "8013:8000"

  algo_engine:
    build:
      context: .
      dockerfile: infra/docker/fastapi-service.Dockerfile
      args:
        SERVICE_DIR: algo_engine
        SERVICE_PACKAGE: algo_engine
        SERVICE_MODULE: app.main
    env_file:
      - .env.dev
    environment:
      ORDER_ROUTER_URL: http://order_router:8000
      ORDER_ROUTER_TIMEOUT: "5.0"
      ORDER_ROUTER_API_KEY: ${ORDER_ROUTER_API_KEY:-demo-router-key}
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      order_router:
        condition: service_healthy
      market_data:
        condition: service_healthy
    volumes:
      - ./infra/migrations:/app/infra/migrations:ro
      - ./scripts:/app/scripts:ro
    ports:
      - "8014:8000"

  market_data:
    build:
      context: .
      dockerfile: infra/docker/fastapi-service.Dockerfile
      args:
        SERVICE_DIR: market_data
        SERVICE_PACKAGE: market_data
        SERVICE_MODULE: app.main
    env_file:
      - .env.dev
    environment:
      MARKET_DATA_DATABASE_URL: postgresql+psycopg2://trading:trading@postgres:5432/trading
      TRADINGVIEW_HMAC_SECRET: ${TRADINGVIEW_HMAC_SECRET:-demo-hmac-secret}
      BINANCE_API_KEY: ${BINANCE_API_KEY:-demo-binance-key}
      BINANCE_API_SECRET: ${BINANCE_API_SECRET:-demo-binance-secret}
      IBKR_HOST: ${IBKR_HOST:-ibkr-gateway}
      IBKR_PORT: ${IBKR_PORT:-4001}
      IBKR_CLIENT_ID: ${IBKR_CLIENT_ID:-1}
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./infra/migrations:/app/infra/migrations:ro
      - ./scripts:/app/scripts:ro
    ports:
      - "8015:8000"

  reports:
    build:
      context: .
      dockerfile: infra/docker/fastapi-service.Dockerfile
      args:
        SERVICE_DIR: reports
        SERVICE_PACKAGE: reports
        SERVICE_MODULE: app.main
    env_file:
      - .env.dev
    environment:
      REPORTS_DATABASE_URL: postgresql+psycopg2://trading:trading@postgres:5432/trading
      REPORTS_CELERY_BROKER: redis://redis:6379/0
      REPORTS_CELERY_BACKEND: redis://redis:6379/1
      REPORTS_REFRESH_INTERVAL: "300"
      REPORTS_STORAGE_PATH: /app/generated-reports
      STREAMING_INGEST_URL: ${STREAMING_INGEST_URL:-http://streaming:8000}
      STREAMING_SERVICE_TOKEN: ${STREAMING_SERVICE_TOKEN:-reports-token}
      STREAMING_ROOM_ID: ${STREAMING_ROOM_ID:-public-room}
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      market_data:
        condition: service_healthy
    volumes:
      - ./infra/migrations:/app/infra/migrations:ro
      - ./scripts:/app/scripts:ro
      - ./data/generated-reports:/app/generated-reports
    ports:
      - "8016:8000"

  alert_engine:
    build:
      context: .
      dockerfile: infra/docker/fastapi-service.Dockerfile
      args:
        SERVICE_DIR: alert_engine
        SERVICE_PACKAGE: alert_engine
        SERVICE_MODULE: app.main
    env_file:
      - .env.dev
    environment:
      ALERT_ENGINE_DATABASE_URL: postgresql+psycopg2://trading:trading@postgres:5432/trading
      ALERT_ENGINE_EVENTS_DATABASE_URL: sqlite:////data/alert_events.db
      ALERT_ENGINE_MARKET_DATA_URL: http://market_data:8000
      ALERT_ENGINE_MARKET_DATA_STREAM_URL: http://market_data:8000
      ALERT_ENGINE_REPORTS_URL: http://reports:8000
      ALERT_ENGINE_NOTIFICATION_URL: http://notification_service:8000
      ALERT_ENGINE_STREAM_SYMBOLS: ${ALERT_ENGINE_STREAM_SYMBOLS:-BTCUSDT,ETHUSDT}
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      market_data:
        condition: service_healthy
      reports:
        condition: service_healthy
      notification_service:
        condition: service_healthy
    volumes:
      - ./infra/migrations:/app/infra/migrations:ro
      - ./scripts:/app/scripts:ro
      - ./data/alert-events:/data
    ports:
      - "8017:8000"

  notification_service:
    build:
      context: .
      dockerfile: infra/docker/fastapi-service.Dockerfile
      args:
        SERVICE_DIR: notification_service
        SERVICE_PACKAGE: notification_service
        SERVICE_MODULE: app.main
    env_file:
      - .env.dev
    environment:
      NOTIFICATION_SERVICE_EVENTS_DATABASE_URL: sqlite:////data/alert_events.db
      NOTIFICATION_SERVICE_SLACK_DEFAULT_WEBHOOK: ${NOTIFICATION_SERVICE_SLACK_DEFAULT_WEBHOOK:-https://hooks.slack.com/services/demo}
      NOTIFICATION_SERVICE_TELEGRAM_BOT_TOKEN: ${NOTIFICATION_SERVICE_TELEGRAM_BOT_TOKEN:-demo-telegram-token}
      NOTIFICATION_SERVICE_TELEGRAM_DEFAULT_CHAT_ID: ${NOTIFICATION_SERVICE_TELEGRAM_DEFAULT_CHAT_ID:-demo-chat}
      NOTIFICATION_SERVICE_TWILIO_ACCOUNT_SID: ${NOTIFICATION_SERVICE_TWILIO_ACCOUNT_SID:-demo-sid}
      NOTIFICATION_SERVICE_TWILIO_AUTH_TOKEN: ${NOTIFICATION_SERVICE_TWILIO_AUTH_TOKEN:-demo-token}
      NOTIFICATION_SERVICE_TWILIO_FROM_NUMBER: ${NOTIFICATION_SERVICE_TWILIO_FROM_NUMBER:-+10000000000}
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./infra/migrations:/app/infra/migrations:ro
      - ./scripts:/app/scripts:ro
      - ./data/alert-events:/data
    ports:
      - "8018:8000"

  streaming:
    build:
      context: .
      dockerfile: infra/docker/fastapi-service.Dockerfile
      args:
        SERVICE_DIR: streaming
        SERVICE_PACKAGE: streaming
        SERVICE_MODULE: app.main
    env_file:
      - .env.dev
    environment:
      STREAMING_PIPELINE_BACKEND: ${STREAMING_PIPELINE_BACKEND:-memory}
      STREAMING_REDIS_URL: redis://redis:6379/2
      STREAMING_NATS_URL: ${STREAMING_NATS_URL:-nats://nats:4222}
      STREAMING_SERVICE_TOKEN_REPORTS: ${STREAMING_SERVICE_TOKEN_REPORTS:-reports-token}
      STREAMING_SERVICE_TOKEN_INPLAY: ${STREAMING_SERVICE_TOKEN_INPLAY:-inplay-token}
      STREAMING_ENTITLEMENTS_CAPABILITY: ${STREAMING_ENTITLEMENTS_CAPABILITY:-can.stream_public}
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./infra/migrations:/app/infra/migrations:ro
      - ./scripts:/app/scripts:ro
    ports:
      - "8019:8000"

  streaming_gateway:
    build:
      context: .
      dockerfile: infra/docker/fastapi-service.Dockerfile
      args:
        SERVICE_DIR: streaming_gateway
        SERVICE_PACKAGE: streaming_gateway
        SERVICE_MODULE: app.main
    env_file:
      - .env.dev
    environment:
      STREAMING_GATEWAY_REDIS_URL: redis://redis:6379/2
      STREAMING_GATEWAY_NATS_URL: ${STREAMING_GATEWAY_NATS_URL:-nats://nats:4222}
      STREAMING_GATEWAY_PUBLIC_BASE_URL: http://streaming_gateway:8000
      STREAMING_GATEWAY_ALLOWED_ORIGINS: ${STREAMING_GATEWAY_ALLOWED_ORIGINS:-https://obsproject.com,https://studio.obsproject.com}
      STREAMING_GATEWAY_TRADINGVIEW_HMAC_SECRET: ${STREAMING_GATEWAY_TRADINGVIEW_HMAC_SECRET:-demo-tradingview-secret}
      STREAMING_GATEWAY_OVERLAY_TOKEN_SECRET: ${STREAMING_GATEWAY_OVERLAY_TOKEN_SECRET:-demo-overlay-secret}
      STREAMING_GATEWAY_ENCRYPTION_KEY: ${STREAMING_GATEWAY_ENCRYPTION_KEY:-ZGVtby1lbmNyeXB0aW9uLWtleQ==}
      STREAMING_GATEWAY_TWITCH_CLIENT_ID: ${STREAMING_GATEWAY_TWITCH_CLIENT_ID:-demo-twitch-id}
      STREAMING_GATEWAY_TWITCH_CLIENT_SECRET: ${STREAMING_GATEWAY_TWITCH_CLIENT_SECRET:-demo-twitch-secret}
      STREAMING_GATEWAY_YOUTUBE_CLIENT_ID: ${STREAMING_GATEWAY_YOUTUBE_CLIENT_ID:-demo-youtube-id}
      STREAMING_GATEWAY_YOUTUBE_CLIENT_SECRET: ${STREAMING_GATEWAY_YOUTUBE_CLIENT_SECRET:-demo-youtube-secret}
      STREAMING_GATEWAY_DISCORD_CLIENT_ID: ${STREAMING_GATEWAY_DISCORD_CLIENT_ID:-demo-discord-id}
      STREAMING_GATEWAY_DISCORD_CLIENT_SECRET: ${STREAMING_GATEWAY_DISCORD_CLIENT_SECRET:-demo-discord-secret}
      STREAMING_GATEWAY_DISCORD_BOT_TOKEN: ${STREAMING_GATEWAY_DISCORD_BOT_TOKEN:-demo-discord-bot-token}
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      streaming:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./infra/migrations:/app/infra/migrations:ro
      - ./scripts:/app/scripts:ro
    ports:
      - "8020:8000"

  inplay:
    build:
      context: .
      dockerfile: infra/docker/fastapi-service.Dockerfile
      args:
        SERVICE_DIR: inplay
        SERVICE_PACKAGE: inplay
        SERVICE_MODULE: app.main
    env_file:
      - .env.dev
    environment:
      INPLAY_REDIS_URL: redis://redis:6379/3
      STREAMING_INGEST_URL: ${STREAMING_INGEST_URL:-http://streaming:8000}
      STREAMING_SERVICE_TOKEN: ${STREAMING_SERVICE_TOKEN_INPLAY:-inplay-token}
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      redis:
        condition: service_healthy
      streaming:
        condition: service_healthy
    volumes:
      - ./infra/migrations:/app/infra/migrations:ro
      - ./scripts:/app/scripts:ro
    ports:
      - "8021:8000"

  web_dashboard:
    build:
      context: .
      dockerfile: infra/docker/fastapi-service.Dockerfile
      args:
        SERVICE_DIR: web_dashboard
        SERVICE_PACKAGE: web_dashboard
        SERVICE_MODULE: app.main
    env_file:
      - .env.dev
    environment:
      WEB_DASHBOARD_STREAMING_BASE_URL: http://streaming_gateway:8000
      WEB_DASHBOARD_STREAMING_ROOM_ID: ${WEB_DASHBOARD_STREAMING_ROOM_ID:-public-room}
      WEB_DASHBOARD_STREAMING_VIEWER_ID: ${WEB_DASHBOARD_STREAMING_VIEWER_ID:-demo-viewer}
      WEB_DASHBOARD_REPORTS_BASE_URL: http://reports:8000
      WEB_DASHBOARD_REPORTS_TIMEOUT: "5.0"
      WEB_DASHBOARD_ALERT_ENGINE_URL: http://alert_engine:8000
      WEB_DASHBOARD_ALERT_ENGINE_TIMEOUT: "5.0"
      WEB_DASHBOARD_AUTH_SERVICE_URL: ${WEB_DASHBOARD_AUTH_SERVICE_URL:-http://auth_service:8000/}
      WEB_DASHBOARD_ALGO_ENGINE_URL: http://algo_engine:8000/
      WEB_DASHBOARD_ORDER_ROUTER_BASE_URL: http://order_router:8000/
      WEB_DASHBOARD_ALERTS_TOKEN: ${WEB_DASHBOARD_ALERTS_TOKEN:-demo-alerts-token}
      WEB_DASHBOARD_ALERT_EVENTS_DATABASE_URL: sqlite:////data/alert_events.db
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      alert_engine:
        condition: service_healthy
      reports:
        condition: service_healthy
      streaming_gateway:
        condition: service_healthy
      streaming:
        condition: service_healthy
    volumes:
      - ./infra/migrations:/app/infra/migrations:ro
      - ./scripts:/app/scripts:ro
      - ./data/alert-events:/data
      - ./services/web_dashboard/app/static:/app/service/web_dashboard/app/static:ro
      - ./services/web_dashboard/app/templates:/app/service/web_dashboard/app/templates:ro
    ports:
      - "8022:8000"

  prometheus:
    image: prom/prometheus:v2.53.1
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infra/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
    ports:
      - "9090:9090"
    healthcheck:
      test:
        - CMD-SHELL
        - wget -q --spider http://localhost:9090/-/healthy
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      auth_service:
        condition: service_healthy
      user_service:
        condition: service_healthy
      order_router:
        condition: service_healthy
      algo_engine:
        condition: service_healthy
      market_data:
        condition: service_healthy
      reports:
        condition: service_healthy
      alert_engine:
        condition: service_healthy
      notification_service:
        condition: service_healthy
      streaming:
        condition: service_healthy
      streaming_gateway:
        condition: service_healthy
      inplay:
        condition: service_healthy
      web_dashboard:
        condition: service_healthy

  grafana:
    image: grafana/grafana:10.4.5
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    volumes:
      - ./docs/observability/dashboards:/var/lib/grafana/dashboards:ro
      - ./infra/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./infra/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3000:3000"
    healthcheck:
      test:
        - CMD-SHELL
        - wget -q --spider http://localhost:3000/api/health
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      prometheus:
        condition: service_healthy

volumes:
  pgdata: {}
